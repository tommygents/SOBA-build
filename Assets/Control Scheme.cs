//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Control Scheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlScheme : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control Scheme"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""34d19f93-c416-4abc-90be-11aa26679e5c"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""3e3da90e-fe8b-41f7-b231-fb74373db0ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""heavy push"",
                    ""type"": ""Button"",
                    ""id"": ""012d1126-3de2-4b3b-a937-e73a25ed84d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""heavy pull"",
                    ""type"": ""Button"",
                    ""id"": ""070e3c94-d736-44b1-8cb8-16c8e201710e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""light push"",
                    ""type"": ""Button"",
                    ""id"": ""e9a11950-ca26-4966-9e12-de5d9b3c4fe3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""light pull"",
                    ""type"": ""Button"",
                    ""id"": ""e7658a5b-db12-4ed3-814a-800a047e206a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""27478abb-384a-4513-9c4b-bb62e2da37fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4788cb8e-a2dd-4979-a678-7230db5591c5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8147eb59-208b-4bbc-b4ab-6bf5e2fa5d0c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b2b9761f-189a-4bf7-b35a-7305b59b784c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e8dfe1f3-e608-4139-8893-99c7cd7a64fe"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""48d5d8b7-91d1-44f4-834f-ef5039a7a891"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""46de5b4c-6a98-4bc8-822b-57ad4f4852b5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89777591-0acc-414b-a99e-bab0db5b5499"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": ""Press(pressPoint=0.7,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""heavy push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63568940-c6ae-4740-9081-0a292ff1d393"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press(pressPoint=0.5,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""heavy push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3be75bca-f723-4278-a567-10217b0d5f42"",
                    ""path"": ""<XInputController>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""light push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55bc3485-63af-4705-9967-a4386b4a8915"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""light push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9937e946-3f07-4c25-b1a5-2ef21ffcf615"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""light pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6d23f26-fc01-45df-aa82-d861c60eea73"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""light pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e674226c-89b9-492f-8f65-bc988896570b"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""heavy pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee263efb-2f00-4192-bc89-1e331dae8299"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""heavy pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1ee460f-1b64-4d57-8e83-8995b097a9dc"",
                    ""path"": ""<XInputController>/rightStickPress"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Ringcon play"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7b1ccf9-275a-41ca-9142-fe01c34cba16"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""keyboard playtest"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Ringcon play"",
            ""bindingGroup"": ""Ringcon play"",
            ""devices"": []
        },
        {
            ""name"": ""keyboard playtest"",
            ""bindingGroup"": ""keyboard playtest"",
            ""devices"": []
        }
    ]
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_move = m_gameplay.FindAction("move", throwIfNotFound: true);
        m_gameplay_heavypush = m_gameplay.FindAction("heavy push", throwIfNotFound: true);
        m_gameplay_heavypull = m_gameplay.FindAction("heavy pull", throwIfNotFound: true);
        m_gameplay_lightpush = m_gameplay.FindAction("light push", throwIfNotFound: true);
        m_gameplay_lightpull = m_gameplay.FindAction("light pull", throwIfNotFound: true);
        m_gameplay_Sprint = m_gameplay.FindAction("Sprint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_gameplay_move;
    private readonly InputAction m_gameplay_heavypush;
    private readonly InputAction m_gameplay_heavypull;
    private readonly InputAction m_gameplay_lightpush;
    private readonly InputAction m_gameplay_lightpull;
    private readonly InputAction m_gameplay_Sprint;
    public struct GameplayActions
    {
        private @ControlScheme m_Wrapper;
        public GameplayActions(@ControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_gameplay_move;
        public InputAction @heavypush => m_Wrapper.m_gameplay_heavypush;
        public InputAction @heavypull => m_Wrapper.m_gameplay_heavypull;
        public InputAction @lightpush => m_Wrapper.m_gameplay_lightpush;
        public InputAction @lightpull => m_Wrapper.m_gameplay_lightpull;
        public InputAction @Sprint => m_Wrapper.m_gameplay_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @heavypush.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypush;
                @heavypush.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypush;
                @heavypush.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypush;
                @heavypull.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypull;
                @heavypull.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypull;
                @heavypull.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHeavypull;
                @lightpush.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpush;
                @lightpush.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpush;
                @lightpush.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpush;
                @lightpull.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpull;
                @lightpull.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpull;
                @lightpull.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightpull;
                @Sprint.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @heavypush.started += instance.OnHeavypush;
                @heavypush.performed += instance.OnHeavypush;
                @heavypush.canceled += instance.OnHeavypush;
                @heavypull.started += instance.OnHeavypull;
                @heavypull.performed += instance.OnHeavypull;
                @heavypull.canceled += instance.OnHeavypull;
                @lightpush.started += instance.OnLightpush;
                @lightpush.performed += instance.OnLightpush;
                @lightpush.canceled += instance.OnLightpush;
                @lightpull.started += instance.OnLightpull;
                @lightpull.performed += instance.OnLightpull;
                @lightpull.canceled += instance.OnLightpull;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    private int m_RingconplaySchemeIndex = -1;
    public InputControlScheme RingconplayScheme
    {
        get
        {
            if (m_RingconplaySchemeIndex == -1) m_RingconplaySchemeIndex = asset.FindControlSchemeIndex("Ringcon play");
            return asset.controlSchemes[m_RingconplaySchemeIndex];
        }
    }
    private int m_keyboardplaytestSchemeIndex = -1;
    public InputControlScheme keyboardplaytestScheme
    {
        get
        {
            if (m_keyboardplaytestSchemeIndex == -1) m_keyboardplaytestSchemeIndex = asset.FindControlSchemeIndex("keyboard playtest");
            return asset.controlSchemes[m_keyboardplaytestSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnHeavypush(InputAction.CallbackContext context);
        void OnHeavypull(InputAction.CallbackContext context);
        void OnLightpush(InputAction.CallbackContext context);
        void OnLightpull(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
}
